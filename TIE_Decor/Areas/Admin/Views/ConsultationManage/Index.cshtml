@model (IEnumerable<TIE_Decor.Entities.Consultation> Consultations, IEnumerable<TIE_Decor.Entities.DesignerSchedules> Schedules)


<div class="container-fluid">
    <div class="row">
        <div class="col-xl-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title">Consultation and Schedule Management</h4>

                    <a href="/admin/consultationmanage/CreateSchedule" class="btn btn-primary">Create New Schedule</a>
                </div>
                <div class="card-body">
                    <ul class="nav nav-tabs" id="myTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="consultations-tab" data-bs-toggle="tab" data-bs-target="#consultations" type="button" role="tab" aria-controls="consultations" aria-selected="true">Consultations</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="schedules-tab" data-bs-toggle="tab" data-bs-target="#schedules" type="button" role="tab" aria-controls="schedules" aria-selected="false">Schedules</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade show active" id="consultations" role="tabpanel" aria-labelledby="consultations-tab">
                            <div class="table-responsive mt-3">
                                <table class="table align-middle mb-0 table-hover table-centered">
                                    <thead class="bg-light-subtle">
                                        <tr>
                                            <th>Consultation ID</th>
                                            <th>User</th>
                                            <th>Scheduled Time</th>
                                            <th>Status</th>
                                            <th>Notes</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.Consultations)
                                        {
                                            <tr>
                                                <td>@item.ConsultationId</td>
                                                <td>@item.User?.FullName</td>
                                                <td>@item.ScheduledTime.ToString("dd/MM/yyyy HH:mm")</td>
                                                <td>@item.Status</td>
                                                <td>@item.Notes</td>
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        @if (item.Status == "Pending")
                                                        {
                                                            <form asp-action="Confirm" asp-route-id="@item.ConsultationId" method="post">
                                                                <button type="submit" class="btn btn-soft-success btn-sm">Confirm</button>
                                                            </form>
                                                            <form asp-action="Decline" asp-route-id="@item.ConsultationId" method="post">
                                                                <button type="submit" class="btn btn-soft-warning btn-sm">Decline</button>
                                                            </form>
                                                        }
                                                        <a href="javascript:void(0);" onclick="confirmDelete('@item.ConsultationId', 'consultation')" class="btn btn-soft-danger btn-sm">
                                                            <iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
                                                        </a>    
                                                        
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="schedules" role="tabpanel" aria-labelledby="schedules-tab">
                            <div class="table-responsive mt-3">
                                <table class="table align-middle mb-0 table-hover table-centered">
                                    <thead class="bg-light-subtle">
                                        <tr>
                                            <th>Schedule ID</th>
                                            <th>Scheduled Time</th>
                                            <th>Status</th>
                                            <th>Notes</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.Schedules)
                                        {
                                            <tr>
                                                <td>@item.ScheduleId</td>
                                                <td>@item.ScheduledTime.ToString("dd/MM/yyyy HH:mm")</td>
                                                <td>@item.Status</td>
                                                <td>@item.Notes</td>
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        @if (item.Status == "Available")
                                                        {
                                                         
                                                         
                                                        }
                                                        <a href="javascript:void(0);" onclick="confirmDelete('@item.ScheduleId', 'schedule')" class="btn btn-soft-danger btn-sm">
                                                            <iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div id="pagination" class="mt-3 text-center"></div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script>
    var currentPage = 1;
    var rowsPerPage = 5; // Số lượng hàng trên mỗi trang
    var table = document.querySelector(".table tbody");
    var rows = Array.from(table.getElementsByTagName("tr")); // Lấy tất cả các hàng vào mảng
    var filteredRows = rows; // Khởi tạo với tất cả các hàng ban đầu

    // Tìm kiếm và hiển thị phân trang
    function searchCategories() {
        var input = document.getElementById("searchInput").value.toLowerCase();
        filteredRows = rows.filter(function (row) {
            var td = row.getElementsByTagName("td")[1]; // Tìm trong cột CategoryName (cột 2)
            if (td) {
                var txtValue = td.textContent || td.innerText;
                return txtValue.toLowerCase().indexOf(input) > -1;
            }
            return false;
        });

        // Sau khi lọc, cập nhật phân trang
        totalPages = Math.ceil(filteredRows.length / rowsPerPage);
        currentPage = 1; // Đặt lại trang về 1 khi có tìm kiếm mới
        displayRows(filteredRows);
        setupPagination(filteredRows);
    }

    // Hiển thị các hàng dựa trên trang hiện tại
    function displayRows(filteredRows) {
        // Ẩn tất cả các hàng
        rows.forEach(function (row) {
            row.style.display = 'none'; // Ẩn tất cả các hàng
        });

        // Hiển thị các hàng phù hợp với trang hiện tại
        var start = (currentPage - 1) * rowsPerPage;
        var end = start + rowsPerPage;

        for (var i = start; i < end && i < filteredRows.length; i++) {
            filteredRows[i].style.display = ''; // Hiển thị các hàng từ start đến end
        }
    }

    // Tạo các nút phân trang
    function setupPagination(filteredRows) {
        var pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        var totalPages = Math.ceil(filteredRows.length / rowsPerPage);

        // Tạo nút "Previous"
        var prevBtn = document.createElement('button');
        prevBtn.textContent = 'Previous';
        prevBtn.classList.add('btn', 'btn-primary', 'mx-1');
        prevBtn.disabled = currentPage === 1; // Vô hiệu hóa nếu đang ở trang 1
        prevBtn.addEventListener('click', function () {
            if (currentPage > 1) {
                currentPage--;
                displayRows(filteredRows);
                setupPagination(filteredRows);
            }
        });
        pagination.appendChild(prevBtn);

        var startPage = Math.max(currentPage - 1, 1); 
        var endPage = Math.min(startPage + 2, totalPages); 

        if (startPage > 1) {
            var firstPage = document.createElement('button');
            firstPage.textContent = '1';
            firstPage.classList.add('btn', 'btn-primary', 'mx-1');
            firstPage.addEventListener('click', function () {
                currentPage = 1;
                displayRows(filteredRows);
                setupPagination(filteredRows);
            });
            pagination.appendChild(firstPage);

            if (startPage > 2) {
                var dots = document.createElement('span');
                dots.textContent = '...';
                pagination.appendChild(dots);
            }
        }

        for (var i = startPage; i <= endPage; i++) {
            var pageBtn = document.createElement('button');
            pageBtn.textContent = i;
            pageBtn.classList.add('btn', 'btn-primary', 'mx-1');
            pageBtn.setAttribute('data-page', i);

            pageBtn.addEventListener('click', function () {
                currentPage = parseInt(this.getAttribute('data-page'));
                displayRows(filteredRows);
                setupPagination(filteredRows); 
            });

            if (i === currentPage) {
                pageBtn.classList.add('active');
            }

            pagination.appendChild(pageBtn);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                var dots = document.createElement('span');
                dots.textContent = '...';
                pagination.appendChild(dots);
            }

            var lastPage = document.createElement('button');
            lastPage.textContent = totalPages;
            lastPage.classList.add('btn', 'btn-primary', 'mx-1');
            lastPage.addEventListener('click', function () {
                currentPage = totalPages;
                displayRows(filteredRows);
                setupPagination(filteredRows);
            });
            pagination.appendChild(lastPage);
        }

        var nextBtn = document.createElement('button');
        nextBtn.textContent = 'Next';
        nextBtn.classList.add('btn', 'btn-primary', 'mx-1');
        nextBtn.disabled = currentPage === totalPages; 
        nextBtn.addEventListener('click', function () {
            if (currentPage < totalPages) {
                currentPage++;
                displayRows(filteredRows);
                setupPagination(filteredRows);
            }
        });
        pagination.appendChild(nextBtn);
    }

    function initializePagination() {
        filteredRows = Array.from(rows); 
        totalRows = filteredRows.length;
        totalPages = Math.ceil(totalRows / rowsPerPage);
        displayRows(filteredRows);
        setupPagination(filteredRows);
    }

    document.addEventListener('DOMContentLoaded', function () {
        initializePagination(); 
    });
</script>

<script>
    // Add this function at the beginning of your script
    function handleError(error) {
        console.error(error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
            footer: error.message
        });
    }

    // Wrap your existing code in a try-catch block
    try {
        var currentPage = 1;
        var rowsPerPage = 5;
        var table = document.querySelector(".table tbody");
        var rows = Array.from(table.getElementsByTagName("tr"));
        var filteredRows = rows;

        function searchCategories() {
            try {
                var input = document.getElementById("searchInput").value.toLowerCase();
                filteredRows = rows.filter(function (row) {
                    var td = row.getElementsByTagName("td")[1];
                    if (td) {
                        var txtValue = td.textContent || td.innerText;
                        return txtValue.toLowerCase().indexOf(input) > -1;
                    }
                    return false;
                });

                totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                currentPage = 1;
                displayRows(filteredRows);
                setupPagination(filteredRows);
            } catch (error) {
                handleError(error);
            }
        }

        function displayRows(filteredRows) {
            try {
                rows.forEach(function (row) {
                    row.style.display = 'none';
                });

                var start = (currentPage - 1) * rowsPerPage;
                var end = start + rowsPerPage;

                for (var i = start; i < end && i < filteredRows.length; i++) {
                    filteredRows[i].style.display = '';
                }
            } catch (error) {
                handleError(error);
            }
        }

        function setupPagination(filteredRows) {
            try {
                // ... (existing setupPagination code) ...
            } catch (error) {
                handleError(error);
            }
        }

        function initializePagination() {
            try {
                filteredRows = Array.from(rows);
                totalRows = filteredRows.length;
                totalPages = Math.ceil(totalRows / rowsPerPage);
                displayRows(filteredRows);
                setupPagination(filteredRows);
            } catch (error) {
                handleError(error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            try {
                initializePagination();
            } catch (error) {
                handleError(error);
            }
        });

        function confirmDelete(id, type) {
            let title, text, confirmButtonText, url;
            if (type === 'consultation') {
                title = 'Are you sure you want to delete this consultation?';
                text = "This action cannot be undone!";
                confirmButtonText = 'Yes, delete it!';
                url = '/admin/consultationmanage/Delete/';
            } else if (type === 'schedule') {
                title = 'Are you sure you want to delete this schedule?';
                text = "This action cannot be undone and may affect associated consultations!";
                confirmButtonText = 'Yes, delete it!';
                url = '/admin/consultationmanage/DeleteSchedule/';
            }

            Swal.fire({
                title: title,
                text: text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: confirmButtonText,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(url + id, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Deleted!',
                                    data.message,
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                if (data.errorCode === 'SCHEDULE_HAS_CONSULTATION') {
                                    Swal.fire(
                                        'Cannot Delete',
                                        'This schedule cannot be deleted because it has an associated consultation.',
                                        'error'
                                    );
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        data.message,
                                        'error'
                                    );
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire(
                                'Error!',
                                'An unexpected error occurred.',
                                'error'
                            );
                        });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            try {
                var triggerTabList = [].slice.call(document.querySelectorAll('#myTab button'))
                triggerTabList.forEach(function (triggerEl) {
                    var tabTrigger = new bootstrap.Tab(triggerEl)
                    triggerEl.addEventListener('click', function (event) {
                        event.preventDefault()
                        tabTrigger.show()
                    })
                })
            } catch (error) {
                handleError(error);
            }
        });

    } catch (error) {
        handleError(error);
    }
</script>
